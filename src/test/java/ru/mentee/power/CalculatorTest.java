package ru.mentee.power;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;

@DisplayName("–¢–µ—Å—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")
class CalculatorTest {
    private final Calculator calculator = new Calculator();

    @Test
    @DisplayName("–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–µ–Ω–∏—è")
    void testAdd() {
        assertEquals(8, calculator.add(5, 3));
        assertEquals(0, calculator.add(-5, 5));
        assertEquals(-8, calculator.add(-5, -3));
    }
    // üîé –í–ê–®–ê –ó–ê–î–ê–ß–ê: –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ! üîé
    @Test
    @DisplayName("–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è")
    void testSubtract() {
        assertEquals(2, calculator.subtract(5, 3));
        assertEquals(-10, calculator.subtract(-5, 5));
        // –û–π! –í —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ. –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –µ—ë:
        assertEquals(-2, calculator.subtract(-5, -3));
    }

    @Test
    @DisplayName("–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è")
    void testMultiply() {
        assertEquals(15, calculator.multiply(5, 3));
        assertEquals(-15, calculator.multiply(-5, 3));
        assertEquals(15, calculator.multiply(-5, -3));
    }

    @Test
    @DisplayName("–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–µ–Ω–∏—è")
    void testDivide() {
        assertEquals(2.5, calculator.divide(5, 2));
        assertEquals(-2.5, calculator.divide(-5, 2));
        assertEquals(2.5, calculator.divide(-5, -2));
    }

    // üî• –í–ê–®–ê –ó–ê–î–ê–ß–ê: –î–æ–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç! üî•
    @Test
    @DisplayName("–¢–µ—Å—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å")
    void testDivideByZero() {
        Exception exception = null;
        exception = assertThrows(ArithmeticException.class, () -> {
            calculator.divide(5, 0);
        });

        assertEquals("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å", exception.getMessage());
    }


        // ü§î –í–æ–ø—Ä–æ—Å: –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å?
        // –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!

        // –®–∞–≥ 1: –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ Exception, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–π–º–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

        // –®–∞–≥ 2: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ assertThrows –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –≤—ã–∑–æ–≤ calculator.divide(5, 0)
        // –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ArithmeticException
        // –ü–æ–¥—Å–∫–∞–∑–∫–∞: assertThrows –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –≤—ã–±—Ä–æ—à–µ–Ω–æ

        // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"
        // –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ assertEquals –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
    }
